function pushShiftAdjustment() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Shift Lookup");
  const data = sheet.getDataRange().getValues();
  const HUMANITY_API_KEY = 'eac3331e63e79a934a2040516d450bf8dfd4971c';
  const BASE_URL = 'https://www.humanity.com/api/v2/';
  const validLocationIds = getValidLocationIds(HUMANITY_API_KEY);

  for (let i = 1; i < data.length; i++) {
    const date = data[i][0];             // Column A
    const newShiftTime = data[i][1];     // Column B
    const shiftTime = data[i][3];        // Column D
    const locationId = data[i][5];       // Column F
    const position = data[i][6];         // Column G
    const status = data[i][7];           // Column H
    const shiftId = data[i][10];         // Column K

    if (!date || !newShiftTime) continue;

    const [startStr, endStr] = newShiftTime.split('-').map(s => s.trim());
    if (!startStr || !endStr) {
      sheet.getRange(i + 1, 8).setValue('INVALID NEW TIME');
      continue;
    }

    const startFormatted = formatTimeString(startStr);
    const endFormatted = formatTimeString(endStr);

    const startDate = new Date(date);
    const endDate = new Date(date);
    const [startHour, startMin] = startStr.split(':').map(Number);
    const [endHour, endMin] = endStr.split(':').map(Number);
    startDate.setHours(startHour, startMin);
    endDate.setHours(endHour, endMin);
    if (endDate <= startDate) endDate.setDate(endDate.getDate() + 1);

    const formattedStartDate = Utilities.formatDate(startDate, Session.getScriptTimeZone(), "MMMM dd, yyyy");
    const formattedEndDate = Utilities.formatDate(endDate, Session.getScriptTimeZone(), "MMMM dd, yyyy");

    // CASE 1: Adjust existing shift
    if (status === 'MATCH FOUND' && shiftId) {
      const shiftUrl = `${BASE_URL}shifts/${shiftId}`;

      try {
        const unpublishPayload = { published: "0" };
        UrlFetchApp.fetch(shiftUrl, {
          method: 'put',
          headers: { 'Authorization': `Bearer ${HUMANITY_API_KEY}`, 'Content-Type': 'application/json' },
          payload: JSON.stringify(unpublishPayload),
          muteHttpExceptions: true
        });
        Utilities.sleep(1000);

        const updatePayload = {
          start_time: startFormatted,
          end_time: endFormatted,
          start_date: formattedStartDate,
          end_date: formattedEndDate
        };
        const updatePayloadText = JSON.stringify(updatePayload);
        const updateResponse = UrlFetchApp.fetch(shiftUrl, {
          method: 'put',
          headers: { 'Authorization': `Bearer ${HUMANITY_API_KEY}`, 'Content-Type': 'application/json' },
          payload: updatePayloadText,
          muteHttpExceptions: true
        });
        const updateResponseText = updateResponse.getContentText();
        Utilities.sleep(1000);

        UrlFetchApp.fetch(shiftUrl, {
          method: 'put',
          headers: { 'Authorization': `Bearer ${HUMANITY_API_KEY}`, 'Content-Type': 'application/json' },
          payload: JSON.stringify({ published: "1" }),
          muteHttpExceptions: true
        });

        const result = JSON.parse(updateResponseText);
        if (result && result.data && result.data.id) {
          sheet.getRange(i + 1, 8).setValue('ADJUSTED');
          sheet.getRange(i + 1, 12).setValue(`Updated to ${startFormatted}-${endFormatted}`);
        } else {
          sheet.getRange(i + 1, 8).setValue('FAILED UPDATE');
          sheet.getRange(i + 1, 12).setValue(updateResponseText);
        }

        sheet.getRange(i + 1, 13).setValue(updatePayloadText);
        sheet.getRange(i + 1, 14).setValue(updateResponseText);

      } catch (error) {
        sheet.getRange(i + 1, 8).setValue('ERROR');
        sheet.getRange(i + 1, 14).setValue(String(error));
      }
    }

    // CASE 2: Create new shift if Column D has "new shift"
    else if (typeof shiftTime === 'string' && shiftTime.toLowerCase().includes("new shift")) {
      if (!validLocationIds.includes(String(locationId))) {
        sheet.getRange(i + 1, 8).setValue('INVALID LOCATION ID');
        continue;
      }

      try {
        const createPayload = {
          start_time: startFormatted,
          end_time: endFormatted,
          start_date: formattedStartDate,
          end_date: formattedEndDate,
          title: position || "New Shift",
          location: locationId,
          type: 0
        };
        const createPayloadText = JSON.stringify(createPayload);
        const createResponse = UrlFetchApp.fetch(`${BASE_URL}shifts`, {
          method: 'post',
          headers: { 'Authorization': `Bearer ${HUMANITY_API_KEY}`, 'Content-Type': 'application/json' },
          payload: createPayloadText,
          muteHttpExceptions: true
        });

        const createResponseText = createResponse.getContentText();
        const result = JSON.parse(createResponseText);

        if (result && result.data && result.data.id) {
          sheet.getRange(i + 1, 8).setValue('NEW SHIFT CREATED');
          sheet.getRange(i + 1, 12).setValue(`Created: ${startFormatted}-${endFormatted}`);
        } else {
          sheet.getRange(i + 1, 8).setValue('FAILED CREATE');
          sheet.getRange(i + 1, 12).setValue(createResponseText);
        }

        sheet.getRange(i + 1, 13).setValue(createPayloadText);
        sheet.getRange(i + 1, 14).setValue(createResponseText);

      } catch (error) {
        sheet.getRange(i + 1, 8).setValue('ERROR CREATE');
        sheet.getRange(i + 1, 14).setValue(String(error));
      }
    }
  }

  SpreadsheetApp.flush();
}

function formatTimeString(timeStr) {
  const [hour, minute] = timeStr.split(':').map(Number);
  const date = new Date();
  date.setHours(hour, minute, 0);
  return Utilities.formatDate(date, Session.getScriptTimeZone(), "h:mma").toLowerCase();
}

function getValidLocationIds(apiKey) {
  const url = "https://www.humanity.com/api/v2/locations";
  const options = {
    method: 'get',
    headers: { 'Authorization': `Bearer ${apiKey}` },
    muteHttpExceptions: true
  };
  try {
    const response = UrlFetchApp.fetch(url, options);
    const result = JSON.parse(response.getContentText());

    if (result.status === 1 && Array.isArray(result.data)) {
      return result.data.map(loc => String(loc.id));
    } else {
      Logger.log('⚠️ Failed to fetch location IDs');
      return [];
    }
  } catch (e) {
    Logger.log(`❌ Error fetching location list: ${e}`);
    return [];
  }
}
